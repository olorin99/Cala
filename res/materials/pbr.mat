{
    "includes": [],
    "materialData": "struct MaterialData {\n  int albedoIndex;\n  int normalIndex;\n  int metallicRoughnessIndex;\n  int emissiveIndex;\n  float emissiveStrength;\n};",
    "materialDefinition": "struct Material {\n  vec3 albedo;\n  vec3 normal;\n  float metallic;\n  float roughness;\n  vec3 emissive;\n  float emissiveStrength;\n};",
    "materialLoad": { "path": "default/materialLoad.glsl" },
    "lit": { "path":  "default/lit.frag" },
    "unlit": "vec4 evalMaterial(Material material) {\n  return vec4(material.albedo, 1.0);\n}",
    "normal": "vec4 evalMaterial(Material material) {\n  return vec4((material.normal + 1) / 2, 1.0);\n}",
    "roughness": "vec4 evalMaterial(Material material) {\n  return vec4(material.roughness, 0.0, 0.0, 1.0);\n}",
    "metallic": "vec4 evalMaterial(Material material) {\n  return vec4(material.metallic, 0.0, 0.0, 1.0);\n}",
    "voxelize": "vec4 evalMaterial(Material material) {\n\n    CameraData camera = bindlessBuffersCamera[globalData.cameraBufferIndex].camera;\n\n    vec3 viewPos = fsIn.ViewPos;\n    vec3 V = normalize(viewPos - fsIn.FragPos);\n\n    vec3 F0 = vec3(0.04);\n    F0 = mix(F0, material.albedo, material.metallic);\n    vec3 Lo = vec3(0.0);\n\n    uint lightCount = getTotalLightCount();\n\n    for (uint lightIndex = 0; lightIndex < lightCount; lightIndex++) {\n        Light light = bindlessBuffersLights[globalData.lightBufferIndex].lights[lightIndex];\n        Lo += pointLight(light, material.normal, viewPos, V, F0, material.albedo, material.roughness, material.metallic);\n    }\n\n    vec3 colour = Lo;\n\n    return vec4(colour, 1.0);\n}",
    "depth_state": {
        "test": true,
        "write": true,
        "compareOp": "LESS"
    }
}