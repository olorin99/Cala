#version 450

layout (local_size_x = 16) in;

struct CameraData {
    mat4 projection;
    mat4 view;
    vec3 position;
};

layout (set = 0, binding = 0) uniform FrameData {
    CameraData camera;
    vec4 planes[6];
};

layout (set = 1, binding = 0) readonly buffer ModelData {
    mat4 inModel[];
};

layout (set = 1, binding = 1) buffer RenderList {
    uint index;
    uint modelIndex[];
};


struct Frustum {
    vec4 planes[6];
};


void main() {
    uint idx = gl_GlobalInvocationID.x;

    const mat4 viewProj = camera.projection * camera.view;

    Frustum frustum;

    frustum.planes[0].x = viewProj[0][3] - viewProj[0][0];
    frustum.planes[0].y = viewProj[1][3] - viewProj[1][0];
    frustum.planes[0].z = viewProj[2][3] - viewProj[2][0];
    frustum.planes[0].w = viewProj[3][3] - viewProj[3][0];

    frustum.planes[1].x = viewProj[0][3] + viewProj[0][0];
    frustum.planes[1].y = viewProj[1][3] + viewProj[1][0];
    frustum.planes[1].z = viewProj[2][3] + viewProj[2][0];
    frustum.planes[1].w = viewProj[3][3] + viewProj[3][0];

    frustum.planes[2].x = viewProj[0][3] - viewProj[0][1];
    frustum.planes[2].y = viewProj[1][3] - viewProj[1][1];
    frustum.planes[2].z = viewProj[2][3] - viewProj[2][1];
    frustum.planes[2].w = viewProj[3][3] - viewProj[3][1];

    frustum.planes[3].x = viewProj[0][3] + viewProj[0][1];
    frustum.planes[3].y = viewProj[1][3] + viewProj[1][1];
    frustum.planes[3].z = viewProj[2][3] + viewProj[2][1];
    frustum.planes[3].w = viewProj[3][3] + viewProj[3][1];

    frustum.planes[4].x = viewProj[0][3] - viewProj[0][2];
    frustum.planes[4].y = viewProj[1][3] - viewProj[1][2];
    frustum.planes[4].z = viewProj[2][3] - viewProj[2][2];
    frustum.planes[4].w = viewProj[3][3] - viewProj[3][2];

    frustum.planes[5].x = viewProj[0][3] + viewProj[0][2];
    frustum.planes[5].y = viewProj[1][3] + viewProj[1][2];
    frustum.planes[5].z = viewProj[2][3] + viewProj[2][2];
    frustum.planes[5].w = viewProj[3][3] + viewProj[3][2];

    vec3 point = inModel[idx][3].xyz;

    for (int i = 0; i < 6; i++) {
        if (dot(point, frustum.planes[i].xyz) + frustum.planes[i].w > 0.0) {
            uint a = atomicAdd(index, 1);
            modelIndex[a] = idx;
        }
    }

}