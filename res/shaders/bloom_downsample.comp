
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

#include "shaderBridge.h"
#include "bindings.glsl"

CALA_USE_SAMPLED_IMAGE(2D)
CALA_USE_STORAGE_IMAGE(2D, writeonly)

#define INPUT_IMAGE CALA_COMBINED_SAMPLER2D(inputIndex, bilinearSampler)
#define OUTPUT_IMAGE CALA_GET_STORAGE_IMAGE2D(writeonly, outputIndex)

layout (push_constant) uniform PushData {
    int inputIndex;
    int outputIndex;
    int bilinearSampler;
    int mipLevel;
};

float getLuminance(vec3 colour) {
    // linear to srgb first
    colour = pow(colour, vec3(1.0 / 2.2));
    return dot(colour, vec3(0.2125, 0.7152, 0.0722));
}

float karisAverage(vec3 colour) {
    float luma = getLuminance(colour) * 0.25;
    return 1.0 / (1.0 + luma);
}

// based on "Next Generation Post Processing in Call of Duty Advanced Warfare" SIGGRAPH 2014 presentation
vec3 downsample(vec2 texCoord) {
    vec3 a = textureOffset(INPUT_IMAGE, texCoord, ivec2(-2, 2)).rgb;
    vec3 b = textureOffset(INPUT_IMAGE, texCoord, ivec2(0, 2)).rgb;
    vec3 c = textureOffset(INPUT_IMAGE, texCoord, ivec2(2, 2)).rgb;

    vec3 d = textureOffset(INPUT_IMAGE, texCoord, ivec2(-2, 0)).rgb;
    vec3 e = textureOffset(INPUT_IMAGE, texCoord, ivec2(0, 0)).rgb;
    vec3 f = textureOffset(INPUT_IMAGE, texCoord, ivec2(2, 0)).rgb;

    vec3 g = textureOffset(INPUT_IMAGE, texCoord, ivec2(-2, -2)).rgb;
    vec3 h = textureOffset(INPUT_IMAGE, texCoord, ivec2(0, -2)).rgb;
    vec3 i = textureOffset(INPUT_IMAGE, texCoord, ivec2(2, -2)).rgb;

    vec3 j = textureOffset(INPUT_IMAGE, texCoord, ivec2(-1, 1)).rgb;
    vec3 k = textureOffset(INPUT_IMAGE, texCoord, ivec2(1, 1)).rgb;

    vec3 l = textureOffset(INPUT_IMAGE, texCoord, ivec2(-1, -1)).rgb;
    vec3 m = textureOffset(INPUT_IMAGE, texCoord, ivec2(1, -1)).rgb;

    vec3 result = vec3(0.0);
    if (mipLevel == 0) {
        vec3 groups[5];
        groups[0] = (a + b + d + e) * (0.125 / 4.0);
        groups[1] = (b + c + e + f) * (0.125 / 4.0);
        groups[2] = (d + e + g + h) * (0.125 / 4.0);
        groups[3] = (e + f + h + i) * (0.125 / 4.0);
        groups[4] = (j + k + l + m) * (0.5 / 4.0);
        groups[0] *= karisAverage(groups[0]);
        groups[1] *= karisAverage(groups[1]);
        groups[2] *= karisAverage(groups[2]);
        groups[3] *= karisAverage(groups[3]);
        groups[4] *= karisAverage(groups[4]);
        result = groups[0] + groups[1] + groups[2] + groups[3] + groups[4];
    } else {
        result = e * 0.125;
        result += (a + c + g + i) * 0.03125;
        result += (b + d + f + h) * 0.0625;
        result += (j + k + l + m) * 0.125;
    }


    return result;
}

void main() {
    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 inputSize = textureSize(INPUT_IMAGE, 0);
    ivec2 outputSize = imageSize(OUTPUT_IMAGE);

    if (any(greaterThanEqual(globCoords, outputSize)))
        return;

    vec2 texCoords = (vec2(globCoords) + 0.5) / outputSize;

    vec3 result = max(downsample(texCoords), 0.0001);

    imageStore(OUTPUT_IMAGE, globCoords, vec4(result, 1.0));

}
