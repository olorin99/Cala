#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Cluster {
    vec4 minPoint;
    vec4 maxPoint;
};

layout (set = 1, binding = 0) buffer ClusterSSBO {
    Cluster clusters[];
};

layout (push_constant) uniform ScreenViewInfo {
    mat4 inverseProjection;
    uvec4 tileSizes;
    uvec2 screenSize;
    float near;
    float far;
};

vec4 screenToView(vec4 screen) {
    vec2 texCoord = screen.xy / screenSize.xy;
    vec4 clip = vec4(vec2(texCoord.x, texCoord.y) * 2.0 - 1.0, screen.z, screen.w);
    vec4 view = inverseProjection * clip;
    view = view / view.w;
    return view;
}

vec3 lineIntersection(vec3 A, vec3 B, float distance) {
    vec3 normal = vec3(0.0, 0.0, 1.0);
    vec3 AB = B - A;
    float t = (distance - dot(normal, A)) / dot(normal, AB);
    return A + t * AB;
}

void main() {
    const vec3 eyePos = vec3(0.0);
    uvec2 tileSize = screenSize / tileSizes.xy;
    uint tileIndex = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

    vec4 maxPointScreenSpace = vec4(vec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * tileSize, 1.0, 1.0);
    vec4 minPointScreenSpace = vec4(gl_WorkGroupID.xy * tileSize, 1.0, 1.0);

    vec3 maxPointViewSpace = screenToView(maxPointScreenSpace).xyz;
    vec3 minPointViewSpace = screenToView(minPointScreenSpace).xyz;

    float tileNear = near * pow(far / near, gl_WorkGroupID.z / float(gl_NumWorkGroups.z));
    float tileFar = near * pow(far / near, (gl_WorkGroupID.z + 1) / float(gl_NumWorkGroups.z));

    vec3 minPointNear = lineIntersection(eyePos, minPointViewSpace, tileNear);
    vec3 minPointFar = lineIntersection(eyePos, minPointViewSpace, tileFar);
    vec3 maxPointNear = lineIntersection(eyePos, maxPointViewSpace, tileNear);
    vec3 maxPointFar = lineIntersection(eyePos, maxPointViewSpace, tileFar);

    vec3 minPoint = min(min(minPointNear, minPointFar), min(maxPointNear, maxPointFar));
    vec3 maxPoint = max(max(minPointNear, minPointFar), max(maxPointNear, maxPointFar));

    clusters[tileIndex].minPoint = vec4(minPoint, 0.0);
    clusters[tileIndex].maxPoint = vec4(maxPoint, 0.0);
}
