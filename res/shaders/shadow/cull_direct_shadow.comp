
layout (local_size_x = LOCAL_SIZE_X) in;

#include "shaderBridge.h"

struct IndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

layout (scalar, set = 2, binding = 0) writeonly buffer DrawCommands {
    MeshTaskCommand commands[];
};

layout (push_constant) uniform FrameData {
    uint cameraIndex;
};

layout (set = 2, binding = 1) buffer Output {
    uint drawCount;
};

bool frustumCheck(vec3 pos, float radius) {
    GPUCamera cullingCamera = globalData.cameraBuffer[cameraIndex].camera;

    for (int i = 0; i < 6; i++) {
        if (dot(vec4(pos, 1.0), cullingCamera.frustum.planes[i]) + radius < 0.0) {
            return false;
        }
    }
    return true;
}

uint getLOD(uint lodCount, vec3 center, float radius) {
    GPUCamera camera = globalData.cameraBuffer.camera;
    vec3 pos = camera.position;

    float meshToCameraDistance = distance(center, pos);
    uint lodIndex = uint(max(1.0 + log(meshToCameraDistance / globalData.lodTransitionBase) /
    log(globalData.lodTransitionStep), 0.0));
    return min(max(lodIndex, globalData.shadowLodBias), lodCount - 1);
}

void main() {
    uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    if (idx >= globalData.maxDrawCount)
    return;

    if (idx == 0) {
        atomicExchange(drawCount, 0);
    }

    barrier();

    GPUMesh mesh = globalData.meshBuffer.meshData[idx];
    if (mesh.enabled == 0 || mesh.castShadows == 0)
        return;

    vec3 center = (mesh.max.xyz + mesh.min.xyz) * 0.5;
    center = (globalData.transformsBuffer.transforms[idx] * vec4(center, 1.0)).xyz;
    vec3 halfExtent = (mesh.max.xyz - mesh.min.xyz) * 0.5;

    bool visible = true;
    if (globalData.gpuCulling > 0) {
        visible = frustumCheck(center, length(halfExtent));
    }
    if (visible) {
        uint lod = getLOD(mesh.lodCount, center, length(halfExtent));

        uint meshletCount = mesh.lods[lod].meshletCount;

        uint a = atomicAdd(drawCount, 1);

        MeshTaskCommand command;
        command.x = uint(ceil(meshletCount / 64.0));
        command.y = 1;
        command.z = 1;
        command.meshID = idx;
        command.meshLOD = lod;
        commands[a] = command;
    }
}
