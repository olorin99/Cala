
layout (local_size_x = 64) in;
layout (triangles, max_vertices = 64, max_primitives = 64) out;

#include "shaderBridge.h"

layout (location = 0) out VsOut {
    vec3 FragPos;
} meshOut[];

struct TaskPayload {
    uint meshIndex;
    uint offset[64];
};
taskPayloadSharedEXT TaskPayload payload;

struct ShadowCameraData {
    mat4 viewProjection;
};

layout (push_constant) uniform PushConstants {
    layout(offset = 96) ShadowCameraData camera;
};

void main() {

    uint threadIndex = gl_LocalInvocationIndex;

    mat4 model = globalData.transformsBuffer.transforms[payload.meshIndex];

    uint meshletIndex = payload.offset[gl_WorkGroupID.x];
    Meshlet meshlet = globalData.meshletBuffer.meshlets[meshletIndex];

    SetMeshOutputsEXT(meshlet.indexCount, meshlet.primitiveCount);

    if (threadIndex < meshlet.indexCount) {
        uint index = globalData.meshletIndexBuffer.indices[meshlet.indexOffset + threadIndex] + meshlet.vertexOffset;
        Vertex vertex = globalData.vertexBuffer.vertices[index];
        vec4 fragPos = model * vec4(vertex.position, 1.0);

        meshOut[threadIndex].FragPos = fragPos.xyz;

        gl_MeshVerticesEXT[threadIndex].gl_Position = camera.viewProjection * fragPos;
    }

    if (threadIndex < meshlet.primitiveCount) {
        uint a = globalData.primitiveBuffer.primitives[meshlet.primitiveOffset + threadIndex * 3 + 0];
        uint b = globalData.primitiveBuffer.primitives[meshlet.primitiveOffset + threadIndex * 3 + 1];
        uint c = globalData.primitiveBuffer.primitives[meshlet.primitiveOffset + threadIndex * 3 + 2];

        gl_PrimitiveTriangleIndicesEXT[threadIndex] = uvec3(a, b, c);
    }
}