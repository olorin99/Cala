
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "global_data.glsl"

layout (rgba32f, set = 2, binding = 0) uniform readonly image2D hdrMap;
layout (set = 2, binding = 1) uniform writeonly image2D backbuffer;

vec3 uncharted2Tonemap(vec3 x) {
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 reinhard(vec3 x) {
    return x / (1.0 + x);
}

vec3 reinhard2(vec3 x) {
    const float white = 4.0;
    return (x * (1.0 + x / (white * white))) / (1.0 + x);
}

vec3 aces(vec3 x) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

vec3 unreal(vec3 x) {
    return x / (x + 0.155) * 1.019;
}

void main() {

    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(backbuffer);
    if (globCoords.x > outputSize.x || globCoords.y > outputSize.y)
        return;

    vec2 texCoords = globCoords / outputSize;

    vec3 hdr = imageLoad(hdrMap, globCoords).rgb;

//    vec3 result = vec3(1.0) - exp(-hdr * camera.exposure);

//    vec3 result = uncharted2Tonemap(hdr * camera.exposure);
//    result = result * (1.0 / uncharted2Tonemap(vec3(11.2f)));

    vec3 result = aces(hdr * globalData.cameraBuffer.camera.exposure);
//    vec3 result = reinhard(hdr * camera.exposure);
//    vec3 result = reinhard2(hdr * camera.exposure);

//    result = pow(result, vec3(1.0 / globalData.gamma)); //TODO: find how to write to srgb storage images

    imageStore(backbuffer, globCoords, vec4(result, 1.0));

}
