
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

#include "shaderBridge.h"
#include "bindings.glsl"
#include "visibility_buffer/visibility.glsl"

layout (rg32ui, set = 0, binding = CALA_BINDLESS_STORAGE_IMAGE) uniform readonly uimage2D calaBindlessStorageImages2Dreadonlyrg32ui[];
layout (rg16i, set = 0, binding = CALA_BINDLESS_STORAGE_IMAGE) uniform readonly iimage2D calaBindlessStorageImages1Dreadonlyrg32i[];
CALA_USE_STORAGE_IMAGE(2D, writeonly);


struct MaterialCount {
    uint count;
    uint offset;
};
layout (scalar, set = 1, binding = 1) buffer MaterialCounts {
    MaterialCount counts[];
};

//layout (scalar, set = 1, binding = 2) buffer PixelPositions {
//    ivec2 positions[];
//};


layout (push_constant) uniform PushData {
    int visibilityImageIndex;
    int backbufferIndex;
    int depthIndex;
    uint materialIndex;
    int pixelPositionsIndex;
};

uint[3] loadIndices(Meshlet meshlet, uint primitiveID) {
    uint vertexOffset = meshlet.vertexOffset;
    uint indexOffset = meshlet.indexOffset;
    uint primitiveOffset = meshlet.primitiveOffset;

    uint[] primitiveIDs = uint[](
        globalData.primitiveBuffer.primitives[primitiveOffset + primitiveID * 3 + 0],
        globalData.primitiveBuffer.primitives[primitiveOffset + primitiveID * 3 + 1],
        globalData.primitiveBuffer.primitives[primitiveOffset + primitiveID * 3 + 2]
    );

    return uint[3](
        globalData.meshletIndexBuffer.indices[indexOffset + primitiveIDs[0]] + vertexOffset,
        globalData.meshletIndexBuffer.indices[indexOffset + primitiveIDs[1]] + vertexOffset,
        globalData.meshletIndexBuffer.indices[indexOffset + primitiveIDs[2]] + vertexOffset
    );
}

Vertex[3] loadVertices(uint[3] indices) {
    return Vertex[3](
        globalData.vertexBuffer.vertices[indices[0]],
        globalData.vertexBuffer.vertices[indices[1]],
        globalData.vertexBuffer.vertices[indices[2]]
    );
}

MATERIAL_DATA;

MATERIAL_DEFINITION;

MATERIAL_LOAD;

MATERIAL_EVAL;

INCLUDES_GO_HERE;

layout (set = CALA_MATERIAL_SET, binding = CALA_MATERIAL_BINDING) readonly buffer MatData {
    MaterialData materials[];
};

void main() {

    const uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    
    const MaterialCount count = counts[materialIndex];
    if (idx >= count.count)
        return;

//    const ivec2 globCoords = positions[count.offset + idx];
    uint index = count.offset + idx;
    uint x = index % MAX_IMAGE_DIMENSIONS_1D;
    uint y = index / MAX_IMAGE_DIMENSIONS_1D;

    const ivec2 globCoords = imageLoad(calaBindlessStorageImages1Dreadonlyrg32i[pixelPositionsIndex], ivec2(x, y)).rg;
    const ivec2 outputSize = imageSize(CALA_GET_STORAGE_IMAGE2D(writeonly, backbufferIndex));
    const vec2 texCoords = (vec2(globCoords) + 0.5) / outputSize;
    if (any(greaterThanEqual(globCoords, outputSize)))
        return;

    const ivec2 inputSize = imageSize(calaBindlessStorageImages2Dreadonlyrg32ui[visibilityImageIndex]);

    const uvec2 data = imageLoad(calaBindlessStorageImages2Dreadonlyrg32ui[visibilityImageIndex], globCoords).rg;
    const uint visibility = data.x;
    const uint drawID = data.y;

    const uint meshletID = getMeshletID(visibility);
    const uint primitiveID = getPrimitiveID(visibility);

    const GPUMesh mesh = globalData.meshBuffer.meshData[drawID];
    const Meshlet meshlet = globalData.meshletBuffer.meshlets[meshletID];

    const uint[] indices = loadIndices(meshlet, primitiveID);
    const Vertex[] vertices = loadVertices(indices);

    const mat4 transform = globalData.transformsBuffer.transforms[drawID];
    const GPUCamera camera = globalData.cameraBuffer[globalData.primaryCameraIndex].camera;

    const vec3[] worldPositions = vec3[](
        (transform * vec4(vertices[0].position, 1.0)).xyz,
        (transform * vec4(vertices[1].position, 1.0)).xyz,
        (transform * vec4(vertices[2].position, 1.0)).xyz
    );
    const vec4[] clipPositions = vec4[](
        camera.projection * camera.view * vec4(worldPositions[0], 1.0),
        camera.projection * camera.view * vec4(worldPositions[1], 1.0),
        camera.projection * camera.view * vec4(worldPositions[2], 1.0)
    );

    const BarycentricDeriv derivitives = calcDerivitives(clipPositions, texCoords * 2 - 1, globalData.swapchainSize);
    const vec3 worldPosition = interpolateVec3(derivitives, worldPositions);

    const vec3[] normals = vec3[](
        vertices[0].normal,
        vertices[1].normal,
        vertices[2].normal
    );
    const vec3 normal = normalize(interpolateVec3(derivitives, normals));

    const vec2[] uvs = vec2[](
        vertices[0].texCoords,
        vertices[1].texCoords,
        vertices[2].texCoords
    );
    const UVGradient uvGrad = calcUVDerivitives(derivitives, uvs);

    const mat3 invTransform = mat3(transpose(inverse(transform)));
    const vec3 wNormal = normalize(invTransform * normal);
    mat3 TBN = mat3(0.0);
    {
        const vec3 ddx_position = analyticalDdx(derivitives, worldPositions);
        const vec3 ddy_position = analyticalDdy(derivitives, worldPositions);
        const vec2 ddx_uv = uvGrad.ddx;
        const vec2 ddy_uv = uvGrad.ddy;

        const vec3 N = wNormal;
        const vec3 T = normalize(ddx_position * ddy_uv.y - ddy_position * ddx_uv.y);
        const vec3 B = -normalize(cross(N, T));
        TBN = mat3(T, B, N);
    }

    const float depth = texture(CALA_COMBINED_SAMPLER2D(depthIndex, globalData.shadowSampler), texCoords).r;

    InterpolatedValues values;
    values.worldPosition = worldPosition;
    values.screenPosition = vec2(globCoords);
    values.depth = depth;
    values.normal = normal;
    values.uvGrad = uvGrad;
    values.TBN = TBN;


    const MaterialData materialData = materials[mesh.materialIndex];
    const Material material = loadMaterial(materialData, values);
    const vec4 colour = evalMaterial(material, values);
    const vec3 result = colour.xyz;

    imageStore(CALA_GET_STORAGE_IMAGE2D(writeonly, backbufferIndex), globCoords, vec4(result, 1.0));
}
