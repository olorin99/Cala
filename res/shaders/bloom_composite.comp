
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "shaderBridge.h"
#include "bindings.glsl"

CALA_USE_STORAGE_IMAGE(2D, writeonly)
CALA_USE_STORAGE_IMAGE_FORMAT(2D, readonly, rgba32f)


layout (set = 0, binding = 3) uniform writeonly image2D storageImages[];
layout (rgba32f, set = 0, binding = 3) uniform readonly image2D readStorageImages[];

layout (push_constant) uniform PushData {
    int upsampleIndex;
    int hdrIndex;
    int outputIndex;
};

void main() {
    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 upsampleSize = imageSize(CALA_GET_STORAGE_IMAGE_FORMAT(2D, readonly, rgba32f, upsampleIndex));
    ivec2 hdrSize = imageSize(CALA_GET_STORAGE_IMAGE_FORMAT(2D, readonly, rgba32f, hdrIndex));
    ivec2 outputSize = imageSize(CALA_GET_STORAGE_IMAGE2D(writeonly, outputIndex));

    if (any(greaterThanEqual(globCoords, outputSize)))
        return;

    vec4 upsample = imageLoad(CALA_GET_STORAGE_IMAGE_FORMAT(2D, readonly, rgba32f, upsampleIndex), globCoords) / 5;
    vec4 hdr = imageLoad(CALA_GET_STORAGE_IMAGE_FORMAT(2D, readonly, rgba32f, hdrIndex), globCoords);

    vec4 result = mix(hdr, upsample, globalData.bloomStrength);

    imageStore(CALA_GET_STORAGE_IMAGE2D(writeonly, outputIndex), globCoords, result);

}
