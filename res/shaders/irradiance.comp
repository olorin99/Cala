#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;


layout (set = 1, binding = 0, rgba32f) uniform readonly imageCube environmentMap;
layout (set = 1, binding = 1, rgba32f) uniform writeonly imageCube irradianceMap;

vec3 cubeToWorld(ivec3 coord, vec2 size) {
    vec2 texCoords = vec2(coord.xy) / size;
    texCoords = texCoords * 2.0 - 1.0;
    switch (coord.z) {
        case 0: return vec3(1.0, -texCoords.yx);
        case 1: return vec3(-1.0, -texCoords.y, texCoords.x);
        case 2: return vec3(texCoords.x, 1.0, texCoords.y);
        case 3: return vec3(texCoords.x, -1.0, -texCoords.y);
        case 4: return vec3(texCoords.x, -texCoords.y, 1.0);
        case 5: return vec3(-texCoords.xy, -1.0);
    }
    return vec3(0.0);
}

ivec3 texCoordToCube(vec3 texCoord, vec2 cubeMapSize) {
    vec3 abst = abs(texCoord);
    texCoord /= max(max(abst.x, abst.y), abst.z);
    float cubeFace;
    vec2 uvCoord;
    if (abst.x > abst.y && abst.y > abst.z) {
        float negx = step(texCoord.x, 0.0);
        uvCoord = mix(-texCoord.zy, vec2(texCoord.z, -texCoord.y), negx);
        cubeFace = negx;
    } else if (abst.y > abst.z) {
        float negy = step(texCoord.y, 0.0);
        uvCoord = mix(texCoord.xz, vec2(texCoord.x, -texCoord.z), negy);
        cubeFace = 2.0 + negy;
    } else {
        float negz = step(texCoord.z, 0.0);
        uvCoord = mix(vec2(texCoord.x, -texCoord.y), -texCoord.xy, negz);
        cubeFace = 4.0 + negz;
    }
    uvCoord = (uvCoord + 1.0) * 0.5;
    uvCoord = uvCoord * cubeMapSize;
    uvCoord = clamp(uvCoord, vec2(0.0), cubeMapSize - vec2(1.0));
    return ivec3(ivec2(uvCoord), int(cubeFace));

}

vec3 aces(vec3 x) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

const float PI = 3.14159265359;

void main() {

    ivec3 cubeCoords = ivec3(gl_GlobalInvocationID);
    vec2 inputMapSize = imageSize(environmentMap);
    vec2 outputMapSize = imageSize(irradianceMap);

    vec3 N = normalize(cubeToWorld(cubeCoords, outputMapSize));

    vec3 irradiance = vec3(0.0);

    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = cross(N, right);

    // sampleDelta = sqrt((2pi * pi/2)/sampleCount)
    // sampleCount of 1000 gives 0.099 sampleDelta
    // sampleCount of 15791 gives 0.025 sampleDelta
    float sampleDelta = 0.099;
//    float sampleDelta = 0.025;

    float deltaPhi = 0.0349;
    float deltaTheta = 0.0245;

    uint nrSamples = 0;
    for (float phi = 0.0; phi < 2 * PI; phi += deltaPhi) {
        for (float theta = 0.0; theta < 0.5 * PI; theta += deltaTheta) {
            vec3 tempVec = cos(phi) * right + sin(phi) * up;
            vec3 sampleVec = cos(theta) * N + sin(theta) * tempVec;
            ivec3 sampleCoord = texCoordToCube(sampleVec, outputMapSize);
            irradiance += imageLoad(environmentMap, sampleCoord).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / nrSamples);

    imageStore(irradianceMap, cubeCoords, vec4(irradiance, 1.0));
}
