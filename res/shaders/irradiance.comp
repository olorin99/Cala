#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;


layout (set = 1, binding = 0) uniform samplerCube environmentMap;
layout (set = 1, binding = 1) uniform writeonly imageCube irradianceMap;

vec3 cubeToWorld(ivec3 coord, vec2 size) {
    vec2 texCoords = vec2(coord.xy) / size;
    texCoords = texCoords * 2.0 - 1.0;
    switch (coord.z) {
        case 0: return vec3(1.0, -texCoords.yx);
        case 1: return vec3(-1.0, -texCoords.y, texCoords.x);
        case 2: return vec3(texCoords.x, 1.0, texCoords.y);
        case 3: return vec3(texCoords.x, -1.0, -texCoords.y);
        case 4: return vec3(texCoords.x, -texCoords.y, 1.0);
        case 5: return vec3(-texCoords.xy, -1.0);
    }
    return vec3(0.0);
}

const float PI = 3.14159265359;

void main() {

    ivec3 cubeCoords = ivec3(gl_GlobalInvocationID);
    vec3 N = normalize(cubeToWorld(cubeCoords, vec2(512.0, 512.0)));

    vec3 irradiance = vec3(0.0);

    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = normalize(cross(N, right));

    // sampleDelta = sqrt((2pi * pi/2)/sampleCount)
    // sampleCount of 1000 gives 0.099 sampleDelta
    // sampleCount of 15791 gives 0.025 sampleDelta
    float sampleDelta = 0.099;
    float nrSamples = 0.0;
    for (float phi = 0.0; phi < 2 * PI; phi += sampleDelta) {
        for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta) {
            vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;
            irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / nrSamples);

    imageStore(irradianceMap, cubeCoords, vec4(irradiance, 1.0));
}
