#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (set = 1, binding = 0) uniform samplerCube environmentMap;
layout (set = 1, binding = 1) uniform writeonly imageCube prefilterMap;
layout (set = 2, binding = 2) uniform Data {
    float roughness;
};

vec3 cubeToWorld(ivec3 coord, vec2 size) {
    vec2 texCoords = vec2(coord.xy) / size;
    texCoords = texCoords * 2.0 - 1.0;
    switch (coord.z) {
            case 0: return vec3(1.0, -texCoords.yx);
            case 1: return vec3(-1.0, -texCoords.y, texCoords.x);
            case 2: return vec3(texCoords.x, 1.0, texCoords.y);
            case 3: return vec3(texCoords.x, -1.0, -texCoords.y);
            case 4: return vec3(texCoords.x, -texCoords.y, 1.0);
            case 5: return vec3(-texCoords.xy, -1.0);
    }
    return vec3(0.0);
}

const float PI = 3.14159265359;

float distributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom / denom;
}

float radicalInverseVDC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 hammersley(uint i, uint N) {
    return vec2(float(i)/float(N), radicalInverseVDC(i));
}

vec3 importanceSampleGGX(vec2 xi, vec3 N, float roughness) {
    float a = roughness * roughness;
    float phi = 2.0 * PI * xi.x;
    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

void main() {
    ivec3 cubeCoords = ivec3(gl_GlobalInvocationID);

//    float mip = roughness * 5;
//    vec2 size = vec2(512.0, 512.0) * pow(0.5, mip);
    vec2 size = imageSize(prefilterMap);

    vec3 N = normalize(cubeToWorld(cubeCoords, size));
    vec3 R = N;
    vec3 V = R;
    const uint SAMPLE_COUNT = 1024u;
    vec3 prefilteredColour = vec3(0.0);
    float totalWeight = 0.0;

    for (uint i = 0; i < SAMPLE_COUNT; i++) {
        vec2 xi = hammersley(i, SAMPLE_COUNT);
        vec3 H = importanceSampleGGX(xi, N, roughness);
        vec3 L = 2.0 * dot(V, H) * H - V;
        float NdotL = clamp(dot(N, L), 0.0, 1.0);
        if (NdotL > 0.0) {
            float D = distributionGGX(N, H, roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;
            float resolution = 512;
            float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            float mipLevel = roughness == 0 ? 0.0 : 0.5 * log2(saSample / saTexel);
            prefilteredColour += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
            totalWeight += NdotL;
        }
    }
    prefilteredColour = prefilteredColour / totalWeight;
    imageStore(prefilterMap, cubeCoords, vec4(prefilteredColour, 1.0));
}
