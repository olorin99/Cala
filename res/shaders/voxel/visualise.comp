
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform texture3D textureMaps[];
layout (set = 0, binding = 2) uniform sampler samplers[];

#include "camera.glsl"

#include "global_data.glsl"

layout (set = 2, binding = 0) uniform writeonly image2D backbuffer;

vec3 scaleAndBias(vec3 p) {
    return vec3(p.xy * 0.5 + 0.5, p.z);
}

bool isInsideCube(vec3 p, float e) {
    return p.x < 1 + e && p.y < 1 + e && p.z < 1 + e && p.x > 0 - e && p.y > 0 - e && p.z > 0 - e;
}

void main() {
    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 texCoords = vec2(globCoords) / vec2(imageSize(backbuffer));

    CameraData camera = bindlessBuffersCamera[globalData.cameraBufferIndex].camera;

    vec3 origin = camera.position;

    vec4 p = inverse(camera.projection * camera.view) * vec4(texCoords * 2 - 1, 0, 1);
    p /= p.w;

    vec3 direction = normalize(p.xyz - origin);
//    vec4 colour = vec4(texCoords, 0.0, 1.0);

    vec4 colour = vec4(0.0);

    float dist = 0.1953125;
    for (int step = 1; step < 1000 && dist < 100 && colour.a < 0.99f; step++) {
//        float dist = step * globalData.vxgi.voxelExtent.x;
        vec3 currentPos = origin + direction * dist;
        vec4 i = globalData.vxgi.projection * vec4(currentPos, 1.0);
        vec3 voxelPos = scaleAndBias(i.xyz);
        if (!isInsideCube(voxelPos, 0)) {
            dist += globalData.vxgi.voxelExtent.x;
            continue;
        }

        vec4 c = texture(sampler3D(textureMaps[globalData.vxgi.gridIndex], samplers[globalData.nearestRepeatSampler]), voxelPos);
//        if (c.a > 0.4)
//            c = vec4(voxelPos, c.a);
//        else
//            c = vec4(0, 0, 0, c.a);

        colour += (1.0f - colour.a) * c;
        dist += globalData.vxgi.voxelExtent.x;
    }


    imageStore(backbuffer, globCoords, colour);
}
