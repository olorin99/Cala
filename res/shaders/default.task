layout (local_size_x = 64) in;

#include "shaderBridge.h"

struct TaskPayload {
    uint meshIndex;
    uint offset[64];
};
taskPayloadSharedEXT TaskPayload payload;

struct MeshTaskCommand {
    uint x;
    uint y;
    uint z;
    uint meshID;
};

layout (set = 1, binding = 1) readonly buffer DrawCommands {
    MeshTaskCommand commands[];
};

shared uint meshletCount;

void main() {
    meshletCount = 0;
    barrier();

    uint meshletIndex = gl_GlobalInvocationID.x;
    uint meshIndex = commands[gl_DrawID].meshID;
    //TODO: meshlet culling

    GPUMesh mesh = globalData.meshBuffer.meshData[meshIndex];

    if (meshletIndex < mesh.meshletCount) {
        uint index = atomicAdd(meshletCount, 1);
        atomicAdd(globalData.feedbackBuffer.feedback.drawnMeshlets, 1);

        payload.offset[index] = meshletIndex;
        payload.meshIndex = meshIndex;
    }

    barrier();
    EmitMeshTasksEXT(meshletCount, 1, 1);
}